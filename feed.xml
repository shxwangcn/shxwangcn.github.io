<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>halfstep</title><subtitle>记录自己在日常工作中遇到的各种问题，也当作自己的学习笔记，偶尔也发发牢骚</subtitle> <updated>2023-04-03T15:50:58+08:00</updated> <author> <name>王书孝(Wang Shuxiao)</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 王书孝(Wang Shuxiao) </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>总结Linux中常见的命令行工具</title><link href="/posts/linux-commands/" rel="alternate" type="text/html" title="总结Linux中常见的命令行工具" /><published>2022-04-21T09:20:12+08:00</published> <updated>2022-04-21T09:20:12+08:00</updated> <id>/posts/linux-commands/</id> <content src="/posts/linux-commands/" /> <author> <name>王书孝(Wang Shuxiao)</name> </author> <category term="linux" /> <category term="commands" /> <summary> 本篇文章总结下日常开发中比较常用的命令行工具。 持续更新中… 包括以下工具： 文本文件类： 文件查找 find 文件搜索 grep 文件替换 sed 文件分析 awk 网络分析类： netstat nc nslookup &amp;amp; dig tcpdump 文件传输&amp;amp;下载： wget curl rsync 其它： xargs 本篇文章会不定期更新，以便新增其它的命令。此外，有些命令因为过于复杂，所以会使用单独的文章来记录： 使用 iptables 管理防火墙 对于每个命令，这里只会记录... </summary> </entry> <entry><title>聊聊golang中的slice</title><link href="/posts/golang-slice/" rel="alternate" type="text/html" title="聊聊golang中的slice" /><published>2022-04-12T23:21:33+08:00</published> <updated>2022-04-15T20:48:43+08:00</updated> <id>/posts/golang-slice/</id> <content src="/posts/golang-slice/" /> <author> <name>王书孝(Wang Shuxiao)</name> </author> <category term="golang" /> <category term="types &amp; containers" /> <category term="slice" /> <summary> 本篇文章聊聊 golang 中的核心数据结构 —— slice 的内部实现，从而保证我们能够正确且高效地使用它。 源码文件： slice实现：runtime/slice.go append函数: cmd/compile/internal/walk/builtin.go </summary> </entry> <entry><title>聊聊golang中的数据处理</title><link href="/posts/golang-buffer/" rel="alternate" type="text/html" title="聊聊golang中的数据处理" /><published>2022-04-12T11:40:48+08:00</published> <updated>2022-04-15T20:48:43+08:00</updated> <id>/posts/golang-buffer/</id> <content src="/posts/golang-buffer/" /> <author> <name>王书孝(Wang Shuxiao)</name> </author> <category term="golang" /> <category term="io" /> <summary> 本篇文章，我们来聊聊golang中的数据处理。 在golang中操作二进制数据，你肯定用过下面的这些类型或者函数： bytes.Buffer io.Copy ioutil.ReadAll 这些类或者函数，底层实现是怎样的？在特定的场景下，我们应该如何选择用哪种呢？ 1 认识golang中的数据读写机制 golang中，所有的读写数据的类，都实现了下面的两个基本接口： // 将数据从对象读取到指定slice，必须保证 len(p) 足够容纳想要读取的数据 // 若成功，则返回实际读取到的字节数（0 &amp;lt;= n &amp;lt;= len(p)) type Reader interface { Read(p []byte) (n int, err error) } // 将指定slice的数据写入到对象 // 返回实际写入的字节数（取决于对象内部能容纳多... </summary> </entry> <entry><title>Kafka原理学习之协议交互流程</title><link href="/posts/kafka-protocol/" rel="alternate" type="text/html" title="Kafka原理学习之协议交互流程" /><published>2021-02-04T17:00:00+08:00</published> <updated>2021-02-04T17:00:00+08:00</updated> <id>/posts/kafka-protocol/</id> <content src="/posts/kafka-protocol/" /> <author> <name>王书孝(Wang Shuxiao)</name> </author> <category term="kafka" /> <summary> 要想理解某个系统是怎么运行的，首先我们可以看看它提供什么样的API。本文从 Kafka 的协议交互流程入手，分析 Producer 和 Consumer 是如何工作的。一方面，可以用来实现自己的 kafkasdk；另一方面也能更好地理解 Kafka 的内部原理。 接下来就从以下3个方面来学习Kafka协议： Kafka协议格式，包括编解码方案； Producer 工作流程； Consumer 工作流程 本文基于 Kafka 1.0 版本描述，较新版本(v2以上)肯定有出入，但核心逻辑没有改变 1 Kafka协议格式 这里主要参考 Kafka 官方提供的 KAFKA PROTOCOL GUIDE。如果你要自己实现 kafka Client，那么建议最好把它打印出来放在手边，一个字一个字地看 n 遍。 如果你只是想要了解 Producer 或者 Con... </summary> </entry> </feed>
